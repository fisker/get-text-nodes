{"version":3,"file":"index.min.mjs","sources":["../src/is-text-node.js","../src/is-white-space-node.js","../src/index.js"],"sourcesContent":["// const {TEXT_NODE = 3} = Node\n\nconst TEXT_NODE = 3\n\nfunction isTextNode(node) {\n  return node.nodeType === TEXT_NODE\n}\n\nexport default isTextNode\n","const WHITE_SPACE = /^\\s*$/\n\nfunction isWhiteSpaceNode(node) {\n  return WHITE_SPACE.test(node.nodeValue)\n}\n\nexport default isWhiteSpaceNode\n","import isTextNode from './is-text-node'\nimport isWhiteSpaceNode from './is-white-space-node'\n\nconst {push} = Array.prototype\n\nfunction getTextNodes(node, options) {\n  const {ignoreWhiteSpace = true, deep = true} = options\n\n  if (isTextNode(node)) {\n    if (!ignoreWhiteSpace || !isWhiteSpaceNode(node)) {\n      return [node]\n    }\n\n    return []\n  }\n\n  const textNodes = []\n  let index = 0\n  const {childNodes = []} = node\n  const {length} = childNodes\n\n  for (; index < length; index++) {\n    const child = childNodes[index]\n\n    if (deep || isTextNode(child)) {\n      push.apply(textNodes, getTextNodes(child, options))\n    }\n  }\n\n  return textNodes\n}\n\nexport default getTextNodes\n"],"names":["TEXT_NODE","isTextNode","node","nodeType","WHITE_SPACE","push","Array","prototype","getTextNodes","options","ignoreWhiteSpace","deep","test","nodeValue","isWhiteSpaceNode","textNodes","index","childNodes","length","child","apply"],"mappings":"AAEA,IAAMA,EAAY,EAElB,SAASC,EAAWC,UACXA,EAAKC,WAAaH,ECL3B,IAAMI,EAAc,YCGbC,EAAQC,MAAMC,UAAdF,oBAEP,SAASG,EAAaN,EAAMO,SACqBA,EAAxCC,iBAAAA,kBAAwCD,EAAfE,KAAAA,mBAE5BV,EAAWC,UACRQ,GDPT,SAA0BR,UACjBE,EAAYQ,KAAKV,EAAKW,WCMDC,CAAiBZ,GAIpC,GAHE,CAACA,WAMNa,EAAY,GACdC,EAAQ,IACcd,EAAnBe,WAAAA,aAAa,KACbC,EAAUD,EAAVC,OAEAF,EAAQE,EAAQF,IAAS,KACxBG,EAAQF,EAAWD,IAErBL,GAAQV,EAAWkB,KACrBd,EAAKe,MAAML,EAAWP,EAAaW,EAAOV,WAIvCM"}